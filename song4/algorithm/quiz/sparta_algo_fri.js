// 문제 설명

// 선분 3개가 평행하게 놓여 있습니다.
// 세 선분의 시작과 끝 좌표가[[start, end], [start, end], [start, end]] 형태로 들어있는 2차원 배열
// lines가 매개변수로 주어질 때, 두 개 이상의 선분이 겹치는 부분의 길이를 return 하도록 solution 함수를 완성해보세요.

// lines가[[0, 2], [-3, -1], [-2, 1]]일 때 그림으로 나타내면 다음과 같습니다.
//
//                ●ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ●
//        ●ㅡㅡㅡㅡㅡㅡㅡㅡㅡ●       ●ㅡㅡㅡㅡㅡㅡㅡㅡ●
// < ----(-3)----(-2)----(-1)----(0)----(1)----(2)----(3)---- >
// 선분이 두 개 이상 겹친 곳은[-2, -1], [0, 1]로 길이 2만큼 겹쳐있습니다.

//                        ●ㅡㅡㅡㅡㅡㅡㅡㅡ●
//        ●ㅡㅡㅡㅡㅡㅡㅡㅡㅡ●       ●ㅡㅡㅡㅡㅡㅡㅡㅡ●
// < ----(-3)----(-2)----(-1)----(0)----(1)----(2)----(3)---- >

//                        ●ㅡㅡㅡㅡ●
//        ●ㅡㅡㅡㅡㅡㅡㅡㅡㅡ●       ●ㅡㅡㅡㅡㅡㅡㅡㅡ●
// < ----(-3)----(-2)----(-1)----(0)----(1)----(2)----(3)---- >

// 제한사항
// lines의 길이 = 3
// lines의 원소의 길이 = 2
// 모든 선분은 길이가 1 이상입니다.
// lines의 원소는[a, b] 형태이며, a, b는 각각 선분의 양 끝점 입니다.
// - 100 ≤ a < b ≤ 100


function solution(lines)
{
    let answer = 0;
    const overLap = {};

    lines.forEach(([start, end]) =>
    {
        for (; start < end; ++start)
        {
            if (overLap[start])
                overLap[start] += 1;
            else
                overLap[start] = 1;
        }
    })
    const keys = Object.keys(overLap);

    keys.forEach(key =>
    {
        if (1 < overLap[key])
            answer++;
    })

    return answer;
}

//                        ●ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ●
//    ● ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ●
//           ● ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ●
// < (0)----(1)----(2)----(3)----(4)----(5)----(6)----(7)----(8)----(9)----(10) >

console.log(solution([[0, 5], [3, 9], [1, 10]]));
console.log(solution([[0, 2], [-3, -1], [-2, 1]]));
console.log(solution([[0, 2], [-3, -1], [-1, 1]]));
console.log(solution([[0, 2], [-3, -1], [-1, 0]]));
console.log(solution([[0, 1], [2, 5], [3, 9]]));
console.log(solution([[-1, 1], [1, 3], [3, 9]]));
console.log(solution([[-1, 0], [1, 2], [0, 1]]));
console.log(solution([[-1, 1], [-2, 0], [-2, 1]]));
console.log(solution([[-2, 1], [-1, 1], [-2, 0]]));
console.log(solution([[-2, 0], [-2, 1], [-1, 1]]));
console.log(solution([[-3, -1], [-2, 1], [-3, 1]]));